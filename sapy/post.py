# -*- coding: utf-8 -*-
"""
Created on Mon May 19 00:37:38 2014

@author: appanacca


"""

from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
import sys as sys
import chebdif as cb
import scipy.linalg as lin
import scipy.interpolate as intp

import scipy.io

import blasius as bl
import numba as nb

import bokeh.plotting as bkpl
import bokeh.models as bkmd
from matplotlib.widgets import Button


class viz(object):
    """
    viz: perform some visualization on the data generated by the
    modal.fluid class
    """
    def __init__(self, in_data):
        # as input needs the in_data.npz with the simulation results
        data = np.load(in_data)
        self.y = data['y']
        self.U = data['U']
        self.dU = data['dU']
        self.ddU = data['ddU']
        self.aCD = data['aCD']
        self.daCD = data['daCD']
        self.eigv = data['eigv']
        self.eigf = data['eigf']
        self.option = dict(zip(data['sim_param_keys'],
                           data['sim_param_values']))
        self.N = self.option['n_points']
        self.D = data['D']

    def plot_velocity(self):
        """plot the velocity profiles"""
        fig, ay = plt.subplots(figsize=(10, 10), dpi=50)
        lines = ay.plot(self.U, self.y, 'b', self.dU, self.y, 'g',
                        self.ddU, self.y, 'r', self.aCD, self.y, 'm',
                        self.daCD, self.y, 'c', lw=2)
        ay.set_ylabel(r'$y$', fontsize=32)
        lgd = ay.legend((lines),
                        (r'$U$', r'$\partial U$',
                         r'$\partial^2 U$', r'$a^* C_D$',
                         r'$\partial a^* C_D$'),
                        loc=3, ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
        # ay.set_ylim([0,5])
        # ax.set_xlim([np.min(time[2*T:3*T]),np.max(time[2*T:3*T])])
        ay.grid()
        # plt.tight_layout()
        # fig.savefig('RESULTS'+'couette.png', bbox_extra_artists=(lgd, ),
        #              bbox_inches='tight', dpi=50)
        plt.show()

    def plot_spectrum(self):
            """ plot the spectrum """
            self.eigv_re = np.real(self.eigv)
            self.eigv_im = np.imag(self.eigv)

            #  for i in np.arange(10):
            self.fig, ay = plt.subplots(figsize=(10, 10), dpi=50)
            plt.subplots_adjust(bottom=0.2)
            lines = ay.plot(self.eigv_re, self.eigv_im, 'b*', lw=10)
            ay.set_ylabel(r'$c_i$', fontsize=32)
            ay.set_xlabel(r'$c_r$', fontsize=32)
            # lgd = ay.legend((lines),(r'$U$',r'$\delta U$',r'$\delta^2 U$'),
            #                          loc=3, ncol=3, bbox_to_anchor=(0,1),
            #                          fontsize = 32)
            ay.set_xlim([0.4, 1.6])
            ay.set_ylim([-0.02, 0.28])
            ay.grid()
            # plt.tight_layout()
            #  fig.savefig('RESULTS'+'spectrum_couette.png',
            #           bbox_inches='tight', dpi=50)
            # plt.show(lines)

            cc = plt.axes([0.7, 0.05, 0.1, 0.075])
            dd = plt.axes([0.81, 0.05, 0.1, 0.075])

            b_next = Button(cc, 'Next eigv')
            b_next.on_clicked(self.new)

            b_close = Button(dd, 'Close')
            b_close.on_clicked(self.close)


            plt.show()

    def plot_eigf(self):
            
            sel_eig = self.fig.ginput(2)

            omega_r_picked = (sel_eig[0][0] + sel_eig[1][0])/2
            omega_i_picked = (sel_eig[0][1] + sel_eig[1][1])/2

            omega_picked = omega_r_picked*(1+0j) + omega_i_picked*(0+1j)
            n = np.argmin(np.abs(self.eigv - omega_picked))

            self.eigfun_picked = self.eigf[:, n]  # *(-0.13 -0.99j
            print omega_picked, lin.norm(self.eigfun_picked)

            if self.option['variables'] == 'v_eta':
                # needed in the case "Euler_wave" because only the half of the
                # point are in fact v the other part of the vector is alpha*v
                v = self.eigfun_picked[0:self.option['n_points']]
                u = np.dot((v/self.option['alpha']), self.D) * (0+1j)

                fig2, (ay2, ay3) = plt.subplots(1, 2)  # , dpi=50)
                lines2 = ay2.plot(np.real(u), self.y, 'r',
                                  np.imag(u), self.y, 'g',
                                  np.sqrt(u*np.conjugate(u)), self.y, 'm', lw=2)
                ay2.set_ylabel(r'$y$', fontsize=32)
                ay2.set_xlabel(r"$u$", fontsize=32)
                # lgd = ay2.legend((lines2),(r'$Re$',r'$Im$',r'$Mod$'),
                #               loc=3, ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
                ay2.set_ylim([0, 5])
                # ay2.set_xlim([-1, 1])
                ay2.grid()

                lines3 = ay3.plot(np.real(v), self.y, 'r', np.imag(v), self.y, 'g',
                                  np.sqrt(v*np.conjugate(v)), self.y, 'm', lw=2)
                ay3.set_ylabel(r'$y$', fontsize=32)
                ay3.set_xlabel(r"$v$", fontsize=32)
                # lgd = ay3.legend((lines3),(r'$Re$',r'$Im$',r'$Mod$'), loc=3,
                #                  ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
                ay3.set_ylim([0, 5])
                # ay3.set_xlim([-1, 1])
                ay3.grid()

                plt.show()

            elif self.option['variables'] == 'p_u_v':
                p = self.eigfun_picked[0:self.N]
                u = self.eigfun_picked[self.N:2*self.N]
                v = self.eigfun_picked[2*self.N:3*self.N]

                fig2, (ay1, ay2, ay3) = plt.subplots(1, 3)  # , dpi = 50)
                lines1 = ay1.plot(np.real(p), self.y, 'r', np.imag(p), self.y, 'g',
                                  np.sqrt(p*np.conjugate(p)), self.y, 'm', lw=2)
                ay1.set_ylabel(r'$y$', fontsize=32)
                ay1.set_xlabel(r"$p$", fontsize=32)
                lgd = ay1.legend((lines1), (r'$Re$', r'$Im$', r'$Mod$'), loc=3,
                                 ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
                ay1.set_ylim([0, 5])
                # ay1.set_xlim([-1, 1])
                ay1.grid()

                lines2 = ay2.plot(np.real(u), self.y, 'r', np.imag(u), self.y, 'g',
                                  np.sqrt(u*np.conjugate(u)), self.y, 'm', lw=2)
                ay2.set_ylabel(r'$y$', fontsize=32)
                ay2.set_xlabel(r"$u$", fontsize=32)
                # lgd = ay2.legend((lines2), (r'$Re$', r'$Im$', r'$Mod$'), loc=3,
                #                  ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
                ay2.set_ylim([0, 5])
                # ay2.set_xlim([-1, 1])
                ay2.grid()

                lines3 = ay3.plot(np.real(v), self.y, 'r', np.imag(v), self.y, 'g',
                                  np.sqrt(v*np.conjugate(v)), self.y, 'm', lw=2)
                ay3.set_ylabel(r'$y$', fontsize=32)
                ay3.set_xlabel(r"$v$", fontsize=32)
                # lgd = ay3.legend((lines3), (r'$Re$', r'$Im$', r'$Mod$'), loc=3,
                #                  ncol=3, bbox_to_anchor=(0, 1), fontsize=32)
                ay3.set_ylim([0, 5])
                # ay3.set_xlim([-1, 1])
                ay3.grid()

                fig2.savefig('fun.png', bbox_inches='tight', dpi=150)

                plt.show()

    def new(self, event):
            self.plot_eigf()

    def close(self, event):
            plt.close()
